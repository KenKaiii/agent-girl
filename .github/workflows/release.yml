name: Build, Sign & Notarize Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-macos:
    name: Build & Notarize macOS
    runs-on: macos-latest

    strategy:
      matrix:
        include:
          - arch: arm64
            target: bun-darwin-arm64
            platform: macos-arm64
          - arch: x64
            target: bun-darwin-x64
            platform: macos-intel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build client bundle
        run: bun run build

      - name: Setup release directory (source-based)
        run: |
          mkdir -p release/agent-girl-${{ matrix.platform }}
          cp -r server release/agent-girl-${{ matrix.platform }}/
          cp -r client release/agent-girl-${{ matrix.platform }}/
          cp -r dist release/agent-girl-${{ matrix.platform }}/
          cp package.json release/agent-girl-${{ matrix.platform }}/
          cp bun.lockb release/agent-girl-${{ matrix.platform }}/ 2>/dev/null || true
          cp LICENSE release/agent-girl-${{ matrix.platform }}/
          cp tailwind.config.js release/agent-girl-${{ matrix.platform }}/ 2>/dev/null || true
          cp postcss.config.mjs release/agent-girl-${{ matrix.platform }}/ 2>/dev/null || true
          cp tsconfig.json release/agent-girl-${{ matrix.platform }}/ 2>/dev/null || true

      - name: Install production dependencies
        run: |
          cd release/agent-girl-${{ matrix.platform }}
          bun install --production

      - name: Create launcher script
        run: |
          cat > release/agent-girl-${{ matrix.platform }}/agent-girl << 'EOF'
          #!/bin/bash
          set -e

          # Get the directory where this script is located
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          cd "$SCRIPT_DIR"

          # Check if bun is installed
          if ! command -v bun &> /dev/null; then
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "  🔧 Installing Bun..."
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              curl -fsSL https://bun.sh/install | bash

              # Add bun to PATH for this session
              export PATH="$HOME/.bun/bin:$PATH"

              echo
              echo "✅ Bun installed successfully!"
              echo
          fi

          # Start the server
          echo "🚀 Starting Agent Girl..."
          echo
          exec bun run server/server.ts
          EOF
          chmod +x release/agent-girl-${{ matrix.platform }}/agent-girl

      - name: Create .env template
        run: |
          cat > release/agent-girl-${{ matrix.platform }}/.env << 'EOF'
          # =============================================================================
          # Anthropic Configuration (Claude Models)
          # =============================================================================
          # Get your API key from: https://console.anthropic.com/
          ANTHROPIC_API_KEY=sk-ant-your-key-here

          # =============================================================================
          # Z.AI Configuration (GLM Models)
          # =============================================================================
          # Get your API key from: https://z.ai
          # The server automatically configures the endpoint when you select a GLM model
          ZAI_API_KEY=your-zai-key-here
          EOF

      - name: Create README
        run: |
          cat > release/agent-girl-${{ matrix.platform }}/README.txt << 'EOF'
          Agent Girl Application - macOS
          ==============================

          Setup (First Time):
          1. Open the .env file in a text editor
          2. Add your Anthropic API key (get from https://console.anthropic.com/)
             Replace: ANTHROPIC_API_KEY=sk-ant-your-key-here
             With: ANTHROPIC_API_KEY=sk-ant-your-actual-key

          To Run:
          - Double-click the 'agent-girl' file
          - Or run from terminal: ./agent-girl
          - The app will start at http://localhost:3001
          - Your browser should open automatically

          First Run:
          - On first launch, Bun runtime will be auto-installed (takes ~5 seconds)
          - Subsequent launches are instant

          Data Storage:
          - Sessions stored in ~/Documents/agent-girl/
          - All your conversations are saved locally

          Requirements:
          - macOS 11+ (Big Sur or later)
          - Anthropic API key (for Claude models)
          - Internet connection (for first-time Bun install)

          Troubleshooting:
          - If port 3001 is busy, kill the process: lsof -ti:3001 | xargs kill -9
          - Make sure .env file has your real API key

          Enjoy!
          EOF

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -A \
            -t cert \
            -f pkcs12 \
            -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Clean up
          rm certificate.p12

      - name: Sign binary
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          codesign --force --options runtime \
            --sign "$APPLE_SIGNING_IDENTITY" \
            --timestamp \
            release/agent-girl-${{ matrix.platform }}/agent-girl

          # Verify signature
          codesign --verify --verbose release/agent-girl-${{ matrix.platform }}/agent-girl

      - name: Create ZIP archive
        run: |
          cd release
          zip -r agent-girl-${{ matrix.platform }}.zip agent-girl-${{ matrix.platform }}/

      - name: Notarize application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Submit for notarization
          xcrun notarytool submit release/agent-girl-${{ matrix.platform }}.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait

          # Note: We don't staple because it's a directory structure, not a .app bundle
          # Users will download the notarized zip which is sufficient for Gatekeeper

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-girl-${{ matrix.platform }}
          path: release/agent-girl-${{ matrix.platform }}.zip
          retention-days: 7

  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build client bundle
        run: bun run build

      - name: Setup release directory (source-based)
        run: |
          New-Item -ItemType Directory -Force -Path release\agent-girl-windows-x64
          Copy-Item -Recurse -Force server release\agent-girl-windows-x64\
          Copy-Item -Recurse -Force client release\agent-girl-windows-x64\
          Copy-Item -Recurse -Force dist release\agent-girl-windows-x64\
          Copy-Item -Force package.json release\agent-girl-windows-x64\
          if (Test-Path bun.lockb) { Copy-Item -Force bun.lockb release\agent-girl-windows-x64\ }
          Copy-Item -Force LICENSE release\agent-girl-windows-x64\
          if (Test-Path tailwind.config.js) { Copy-Item -Force tailwind.config.js release\agent-girl-windows-x64\ }
          if (Test-Path postcss.config.mjs) { Copy-Item -Force postcss.config.mjs release\agent-girl-windows-x64\ }
          if (Test-Path tsconfig.json) { Copy-Item -Force tsconfig.json release\agent-girl-windows-x64\ }

      - name: Install production dependencies
        run: |
          cd release\agent-girl-windows-x64
          bun install --production

      - name: Create launcher script
        run: |
          @'
          @echo off
          setlocal

          :: Get the directory where this script is located
          set "SCRIPT_DIR=%~dp0"
          cd /d "%SCRIPT_DIR%"

          :: Check if bun is installed
          where bun >nul 2>nul
          if %ERRORLEVEL% NEQ 0 (
              echo ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
              echo   🔧 Installing Bun...
              echo ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
              powershell -c "irm bun.sh/install.ps1 | iex"

              :: Add bun to PATH for this session
              set "PATH=%USERPROFILE%\.bun\bin;%PATH%"

              echo.
              echo ✅ Bun installed successfully!
              echo.
          )

          :: Start the server
          echo 🚀 Starting Agent Girl...
          echo.
          bun run server\server.ts
          '@ | Out-File -FilePath release\agent-girl-windows-x64\agent-girl.bat -Encoding ASCII

      - name: Create .env template
        run: |
          @"
          # =============================================================================
          # Anthropic Configuration (Claude Models)
          # =============================================================================
          # Get your API key from: https://console.anthropic.com/
          ANTHROPIC_API_KEY=sk-ant-your-key-here

          # =============================================================================
          # Z.AI Configuration (GLM Models)
          # =============================================================================
          # Get your API key from: https://z.ai
          # The server automatically configures the endpoint when you select a GLM model
          ZAI_API_KEY=your-zai-key-here
          "@ | Out-File -FilePath release\agent-girl-windows-x64\.env -Encoding UTF8

      - name: Create README
        run: |
          @"
          Agent Girl Application - Windows
          =================================

          Setup (First Time):
          1. Open the .env file in a text editor
          2. Add your Anthropic API key (get from https://console.anthropic.com/)
             Replace: ANTHROPIC_API_KEY=sk-ant-your-key-here
             With: ANTHROPIC_API_KEY=sk-ant-your-actual-key

          To Run:
          - Double-click the 'agent-girl.bat' file
          - Or run from command prompt: agent-girl.bat
          - The app will start at http://localhost:3001
          - Your browser should open automatically

          First Run:
          - On first launch, Bun runtime will be auto-installed (takes ~10 seconds)
          - Subsequent launches are instant

          Data Storage:
          - Sessions stored in %USERPROFILE%\Documents\agent-girl\
          - All your conversations are saved locally

          Requirements:
          - Windows 10 or later
          - Anthropic API key (for Claude models)
          - Internet connection (for first-time Bun install)

          Troubleshooting:
          - If port 3001 is busy, kill the process using Task Manager
          - Make sure .env file has your real API key

          Enjoy!
          "@ | Out-File -FilePath release\agent-girl-windows-x64\README.txt -Encoding UTF8

      - name: Create ZIP archive
        run: |
          Compress-Archive -Path release\agent-girl-windows-x64 -DestinationPath release\agent-girl-windows-x64.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-girl-windows-x64
          path: release/agent-girl-windows-x64.zip
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Agent Girl ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/agent-girl-macos-arm64/agent-girl-macos-arm64.zip
            artifacts/agent-girl-macos-intel/agent-girl-macos-intel.zip
            artifacts/agent-girl-windows-x64/agent-girl-windows-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
